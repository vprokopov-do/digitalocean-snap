import requests
import time
import os

def main(args):
    # Ingesting the access token.
    token = os.getenv('token', None)
    if not token:
        return {"body": "Error: No access token provided. The process is terminating."}

    # Ingesting the list of Droplet IDs.
    droplets = os.getenv("droplets", None)
    if not droplets:
        return {"body": "Error: No Droplet IDs provided. The process is terminating."}
    droplets = droplets.split(',')

    # Looping through the list of Droplet IDs and generating messages.
    msg = ''
    body = ''
    for droplet in droplets:
        msg = snap(droplet, token)
        body = body + f"Droplet ID: {droplet} - {msg}"

    # Returning the final message.
    return {"body": body}

def snap(droplet, token):
    # Building the base URL.
    url_base = f"https://api.digitalocean.com/v2/droplets/{droplet}"
    headers = {"Authorization": f"Bearer {token}"}
   
    # Triggering snapshot creation with a name including the full date and UTC timestamp.
    url_trigger_snapshot_creation = f"{url_base}/actions"
    snapshot_name = f"autogenerated_{time.strftime('%Y_%m_%d_%H_%M')}"
    data = {"type": "snapshot", "name": snapshot_name}
    trigger_snapshot_creation = requests.post(url_trigger_snapshot_creation, headers=headers, json=data)
    
    # Checking the response status code to handle success or errors.
    if trigger_snapshot_creation.status_code == 201:
        msg = f"Snapshot creation triggered: {snapshot_name}. "
    else:
        msg = "Error: Snapshot creation failed. "

    # Triggering snapshot deletion.
    url_list_snapshots = f"{url_base}/snapshots"
    list_snapshots = requests.get(url_list_snapshots, headers=headers)

    # Checking the response status code to handle success or errors.
    if list_snapshots.status_code == 200:
        for value in list_snapshots.json()['snapshots']:
            if "autogenerated" in value['name']:
                url_trigger_snapshot_deletion = f"https://api.digitalocean.com/v2/snapshots/{value['id']}"
                trigger_snapshot_deletion = requests.delete(url_trigger_snapshot_deletion, headers=headers)
                
                # Checking the response status code to handle success or errors.
                if trigger_snapshot_deletion.status_code == 204:
                    msg += f"Snapshot deletion triggered: {value['name']}. "
                else:
                    msg += "Error: Snapshot deletion failed. "
    else:
        msg += "Error: Unable to list snapshots. "
        
    return msg

if __name__ == "__main":
    main()
